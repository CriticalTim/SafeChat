@page "/chat"

@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims;
@using Microsoft.JSInterop;
@inject NavigationManager NavMan
@inject AuthenticationStateProvider persAuth
@inject IJSRuntime JsRuntime

@attribute [Authorize]
@rendermode InteractiveWebAssembly


    <AuthorizeView>





        @if (isConnected())
        {
            
            <div class=" cp-chatbox">

                    <div @ref="chatWindow" class="cp-chatbox-box">
                        @foreach (var message in messages)
                        {
                            <div class="cp-message-send">
                                @message
                            </div>
                        }
                        @foreach (var message2 in messagesSend)
                        {
                            <div class="cp-message">
                                @message2
                            </div>
                        }

                    </div>

                    <div class="chat-input">
                        <input class="cyberpunk-input" type="text" @bind="messageInput" @onkeyup="HandleKeyUp" placeholder="Nachricht schreiben" />
                        <button @onclick="Send" class="cyberpunk-button">Senden</button>
                    </div>

                    <div class="cp-chatbox-box contacts">
                        @foreach (var contact in contacts)
                        {
                            <div class="cp-contact">
                                @contact
                            </div>
                        }
                    </div>
                
            </div>


        }
        else
        {
            <p>Loading ...</p>
        }




    </AuthorizeView>





@code{
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private List<string> messagesSend = new List<string>();
    private List<string> contacts = new List<string> { "Tim.storbeck", "max.mustermann" };
    private string? messageInput = String.Empty;
    public string? username;
    public string? userShort;
    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();

    ElementReference chatWindow;

    protected override async Task OnInitializedAsync()
    {

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavMan.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("RecieveMessageAll", (user, message) =>
        {
            var encodingMsg = $"{user}: {message}";
            if(user != userShort)
            {
                messages.Add(encodingMsg);
                JsRuntime.InvokeVoidAsync("scrollToEnd", new object[] { chatWindow });
                InvokeAsync(StateHasChanged);
            }

        });

        await hubConnection.StartAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await GetClaimsPrincipalData();
        await base.OnParametersSetAsync();
    }

    public async Task GetClaimsPrincipalData()
    {
        var authState = await persAuth.GetAuthenticationStateAsync();
        username = authState.User.Identity?.Name;
        int atIndex = username.IndexOf('@');
        userShort = username.Substring(0, atIndex);

    }

    Task Send()
    {
        hubConnection.SendAsync("SendMessageExceptUser", userShort, messageInput);
        if(messageInput != String.Empty)
        {
            messagesSend.Add(messageInput);
            InvokeAsync(StateHasChanged);
        }


        return Task.CompletedTask;
    }

    Task HandleKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            Send();
        }
        return Task.CompletedTask;
    }

    public bool isConnected()
    {
        if (hubConnection.State == HubConnectionState.Connected) return true;
        else return false;
    }

    public bool isConnecting()
    {
        if (hubConnection.State == HubConnectionState.Connecting) return true;
        else return false;
    }

    void ScrollToEnd()
    {
        JsRuntime.InvokeVoidAsync("scrollToEnd", new object[] { chatWindow });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        ScrollToEnd();

    }


}