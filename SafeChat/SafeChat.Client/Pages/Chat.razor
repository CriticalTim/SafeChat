@page "/chat"

@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims;
@using Microsoft.JSInterop;
@using SafeChat.Client.Chat;
@using System.Timers;
@inject NavigationManager NavMan
@inject AuthenticationStateProvider persAuth
@inject IJSRuntime JsRuntime

@attribute [Authorize]
@rendermode InteractiveWebAssembly


    <AuthorizeView>
        @if (isConnected())
        {
            
            <div class=" cp-chatbox">

                    <div @ref="chatWindow" class="cp-chatbox-box">
                        @foreach (var message in chatMessages)
                        {
                            <div class="@(message.User == context.User.Identity?.Name ? "cp-message" : "cp-message-send")">
                                @message.User.Substring(0, @message.User.IndexOf('@')): @message.Message
                            </div>
                        } 
                    </div>

                    <div class="chat-input">
                        <input class="cyberpunk-input" type="text" @bind="messageInput" @onkeyup="HandleKeyUp" placeholder="Nachricht schreiben" />
                        <button @onclick="Send" class="cyberpunk-button">Senden</button>
                    </div>

                    <div class="cp-chatbox-box contacts">
                        
                        <div class="cp-contact" style="background-color:white;">
                            <h5>Online Kontakte </h5>
                        </div>
                            @if (contacts != null && (contacts.Count() > 0))
                            {
                                @foreach (var contact in contacts)
                                {
                                    <div class="cp-contact">
                                        @contact
                                    </div>
                                }
                            }
                            else
                            {
                                <p><span>No Coctacts found..</span></p>
                            }

                    </div>
                
            </div>


        }
        else
        {
            <p>Loading ...</p>
        }
    </AuthorizeView>







@code{
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private List<string> messagesSend = new List<string>();
    private List<string> contacts = new List<string>();
    private List<ChatMessage> chatMessages = new List<ChatMessage>();

    private static Timer timer;

    private string? messageInput = String.Empty;
    public string? username;
    public string? userShort;
    bool isMe = false;
    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();

    ElementReference chatWindow;

    protected override async Task OnInitializedAsync()
    {

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavMan.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("RecieveMessageAll", (user, message) =>
        {

            chatMessages.Add(new ChatMessage(user, message));
            JsRuntime.InvokeVoidAsync("scrollToEnd", new object[] { chatWindow });
            InvokeAsync(StateHasChanged);

        });

        hubConnection.On<string>("Connected", (user) =>
        {
            if (!contacts.Contains(user))
            {
                contacts.Add(user);
            }
            InvokeAsync(StateHasChanged);
        });


        await hubConnection.StartAsync();

    }

    protected override async Task OnParametersSetAsync()
    {
        await GetClaimsPrincipalData();
        await base.OnParametersSetAsync();
    }

    public async Task GetClaimsPrincipalData()
    {
        var authState = await persAuth.GetAuthenticationStateAsync();
        username = authState.User.Identity?.Name;
        //int atIndex = username.IndexOf('@');
        //userShort = username.Substring(0, atIndex);
    }



    Task Send()
    {
        hubConnection.SendAsync("SendMessageExceptUser", username, messageInput);

        hubConnection.SendAsync("IAmOnline", username);
        return Task.CompletedTask;
    }

    Task HandleKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            Send();
        }
        return Task.CompletedTask;
    }

    public bool isConnected()
    {
        if (hubConnection.State == HubConnectionState.Connected) { hubConnection.SendAsync("IAmOnline", username); return true; }
        else return false;
    }

    public bool isConnecting()
    {
        if (hubConnection.State == HubConnectionState.Connecting) return true;
        else return false;
    }

    public bool isDisconnecting()
    {
        if (hubConnection.State == HubConnectionState.Disconnected) return true;
        else return false;
    }

    void ScrollToEnd()
    {
        JsRuntime.InvokeVoidAsync("scrollToEnd", new object[] { chatWindow });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        ScrollToEnd();

    }

    //private static void SetTimer()
    //{
    //    // Create a timer with a one-minute interval.
    //    timer = new Timer(60000); // 60000 milliseconds = 1 minute

    //    // Hook up the Elapsed event for the timer. 
    //    timer.Elapsed += OnTimedEvent;

    //    // Start the timer
    //    timer.AutoReset = false; // So the timer executes only once
    //    timer.Enabled = true;
    //}

    //private static void OnTimedEvent(Object source, ElapsedEventArgs e)
    //{
    //    ExecuteAfterOneMinute();
    //    timer.Stop();
    //    timer.Dispose();

    //}


}